class t{constructor(t){this.privateKey=void 0,this.privateKey=t.privateKey}async generateUID(){return"magic-schema-uid"}async storeSchema(t){return"magic-schema-uid"}async verifySchema(t){return!0}async storeAttestation(t){return"magic-attestation-uid"}async verifyAttestationUID(t){return!0}async verifyAttestationIsRevocable(t){return!0}async updateAttestationStatus(t,a){return!0}async fetchSchema(t){return null}async performDelegation(t,a){return!0}async fetchAttestation(t){return null}async fetchAllAttestations(){return[]}async verifyAttestationValidity(t){return!0}async fetchCurrentTimestamp(){return Date.now()}async fetchAttestationCount(){return 0}async fetchAllSchemaUIDs(){return[]}async fetchAllSchemaRecords(){return[]}}class a extends t{async create(t){if(!await this.verifySchema(t))return{error:"Invalid schema"};const a=await this.generateUID();return await this.storeAttestation(a),{data:a}}async revoke(t){return await this.verifyAttestationUID(t)?await this.verifyAttestationIsRevocable(t)?(await this.updateAttestationStatus(t,"revoked"),{data:t}):{error:"Attestation is not revocable"}:{error:"Invalid attestation"}}async getSchema(t){const a=await this.fetchSchema(t);return a?{data:a}:{error:"Schema not found"}}async delegateAttestation(t,a){return await this.verifyAttestationUID(t)?{data:await this.performDelegation(t,a)}:{error:"Invalid attestation"}}async getAttestation(t){const a=await this.fetchAttestation(t);return a?{data:a}:{error:"Attestation not found"}}async getAllAttestations(){return{data:await this.fetchAllAttestations()}}async isAttestationValid(t){return{data:await this.verifyAttestationValidity(t)}}async getTimestamp(){return{data:await this.fetchCurrentTimestamp()}}async getNumberOfAttestations(){return{data:await this.fetchAttestationCount()}}}class e extends t{async register(t){const a=await this.generateUID();return await this.storeSchema(a),{data:a}}async retrieve(t){const a=await this.generateUID();return await this.storeSchema(a),{data:a}}async getAllUIDs(){return{data:await this.fetchAllSchemaUIDs()}}async getAllSchemaRecords(){return{data:await this.fetchAllSchemaRecords()}}}class s{constructor(t){this.config=void 0,this.attestation=void 0,this.schema=void 0,this.config=t,this.attestation=new a(this.config),this.schema=new e(this.config)}}export{s as default};
