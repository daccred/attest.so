const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function main() {
  console.log('[INFO] Attempting to connect to the database and fetch metadata...');
  let testTransactionId = null;
  let testEventId = null;

  try {
    const metadataCount = await prisma.metadata.count();
    console.log(`[SUCCESS] Connected to the database. Found ${metadataCount} records in the Metadata table.`);

    // 1. Create a mock ContractTransaction using data from output.log
    // Use a unique txHash for testing to avoid conflicts if the script is run multiple times
    // or if the original txHash from the log already exists in a non-test context.
    const originalTxHash = "e1c34a4babaf59214fbffa61e7cdcde06efec823ce3df0f76aa42a0f0afa5c97";
    const mockTxHash = originalTxHash + "_test_" + Date.now();

    console.log(`[INFO] Attempting to create a mock ContractTransaction with txHash: ${mockTxHash}`);
    const testTransaction = await prisma.contractTransaction.create({
      data: {
        txHash: mockTxHash,
        status: "SUCCESS", // From output.log
        ledger: 1021514,    // From output.log (transactionDetails.ledger)
        createdAt: new Date(parseInt("1747517796", 10) * 1000), // From output.log (transactionDetails.createdAt)
        applicationOrder: 3, // From output.log
        feeBump: false,      // From output.log
        envelopeXdr: "AAAAAgAAAADmRoSC3naqz3bx1TEOAU4Jign5MHCJrCdZAmtsLiZnIgBDxL0ABmDLAAAAlgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAGAAAAAAAAAABxxxfwr8GvE1XSU9+heeUKCQ+hZkb/l0tV3BSkbigVYEAAAAIcmVnaXN0ZXIAAAAEAAAAEgAAAAAAAAAA5kaEgt52qs928dUxDgFOCYoJ+TBwiawnWQJrbC4mZyIAAAAOAAAALEludGVncmF0aW9uVGVzdFNjaGVtYV82YWQxOTllZihmaWVsZD1TdHJpbmcpAAAAAQAAAAAAAAABAAAAAQAAAAAAAAAAAAAAAcccX8K/BrxNV0lPfoXnlCgkPoWZG/5dLVdwUpG4oFWBAAAACHJlZ2lzdGVyAAAABAAAABIAAAAAAAAAAOZGhILedqrPdvHVMQ4BTgmKCfkwcImsJ1kCa2wuJmciAAAADgAAACxJbnRlZ3JhdGlvblRlc3RTY2hlbWFfNmFkMTk5ZWYoZmllbGQ9U3RyaW5nKQAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAHUbtzTAyUd4Nr7fnD8xAUIpbKgOF9Fb+lzFB5V9fWGekAAAABAAAABgAAAAHHHF/Cvwa8TVdJT36F55QoJD6FmRv+XS1XcFKRuKBVgQAAABQAAAABAB4XKwAANowAAAQ8AAAAAAA0gn0AAAABLiZnIgAAAECOCcpAxGMVuvsiO1rF1rZ+Ro5vxS6owgJoMbhK8NI3CISPIDXB1Q9aoAilRFK81Hf9n1Ry46gkBNYVu/nzR8YF", // From output.log
        resultXdr: "AAAAAAAtOm0AAAAAAAAAAQAAAAAAAAAYAAAAAPCRGHZ3mypaYgAnEniir6eHprC6SNkOdj4J+QSG/SQYAAAAAA==", // From output.log
        resultMetaXdr: "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", // From output.log (transactionDetails.resultMetaXdr)
        diagnosticEventsXdr: [ // From output.log (transactionDetails.diagnosticEventsXdr)
            "AAAAAQAAAAAAAAAAAAAAAgAAAAAAAAADAAAADwAAAAdmbl9jYWxsAAAAAA0AAAAgxxxfwr8GvE1XSU9+heeUKCQ+hZkb/l0tV3BSkbigVYEAAAAPAAAACHJlZ2lzdGVyAAAAEAAAAAEAAAAEAAAAEgAAAAAAAAAA5kaEgt52qs928dUxDgFOCYoJ+TBwiawnWQJrbC4mZyIAAAAOAAAALEludGVncmF0aW9uVGVzdFNjaGVtYV82YWQxOTllZihmaWVsZD1TdHJpbmcpAAAAAQAAAAAAAAAB",
            "AAAAAQAAAAAAAAABxxxfwr8GvE1XSU9+heeUKCQ+hZkb/l0tV3BSkbigVYEAAAABAAAAAAAAAAIAAAAPAAAABlNDSEVNQQAAAAAADwAAAAhSRUdJU1RFUgAAABAAAAABAAAAAgAAAA0AAAAgumVeRKOdwxeuvyhzE7h2W9DB8+E3DyJGBHFZfeaS/vYAAAASAAAAAAAAAADmRoSC3naqz3bx1TEOAU4Jign5MHCJrCdZAmtsLiZnIg==",
            "AAAAAQAAAAAAAAABxxxfwr8GvE1XSU9+heeUKCQ+hZkb/l0tV3BSkbigVYEAAAACAAAAAAAAAAIAAAAPAAAACWZuX3JldHVybgAAAAAAAA8AAAAIcmVnaXN0ZXIAAAANAAAAILplXkSjncMXrr8ocxO4dlvQwfPhNw8iRgRxWX3mkv72",
            "AAAAAAAAAAAAAAAAAAAAAgAAAAAAAAACAAAADwAAAAxjb3JlX21ldHJpY3MAAAAPAAAACnJlYWRfZW50cnkAAAAAAAUAAAAAAAAAAg==",
            "AAAAAAAAAAAAAAAAAAAAAgAAAAAAAAACAAAADwAAAAxjb3JlX21ldHJpY3MAAAAPAAAAC3dyaXRlX2VudHJ5AAAAAAUAAAAAAAAAAQ==",
            "AAAAAAAAAAAAAAAAAAAAAgAAAAAAAAACAAAADwAAAAxjb3JlX21ldHJpY3MAAAAPAAAAEGxlZGdlcl9yZWFkX2J5dGUAAAAFAAAAAAAANow=",
            "AAAAAAAAAAAAAAAAAAAAAgAAAAAAAAACAAAADwAAAAxjb3JlX21ldHJpY3MAAAAPAAAAEWxlZGdlcl93cml0ZV9ieXRlAAAAAAAABQAAAAAAAAQ8",
            "AAAAAAAAAAAAAAAAAAAAAgAAAAAAAAACAAAADwAAAAxjb3JlX21ldHJpY3MAAAAPAAAADXJlYWRfa2V5X2J5dGUAAAAAAAAFAAAAAAAAAFQ=",
            "AAAAAAAAAAAAAAAAAAAAAgAAAAAAAAACAAAADwAAAAxjb3JlX21ldHJpY3MAAAAPAAAADndyaXRlX2tleV9ieXRlAAAAAAAFAAAAAAAAAAA=",
            "AAAAAAAAAAAAAAAAAAAAAgAAAAAAAAACAAAADwAAAAxjb3JlX21ldHJpY3MAAAAPAAAADnJlYWRfZGF0YV9ieXRlAAAAAAAFAAAAAAAAAzQ=",
            "AAAAAAAAAAAAAAAAAAAAAgAAAAAAAAACAAAADwAAAAxjb3JlX21ldHJpY3MAAAAPAAAAD3dyaXRlX2RhdGFfYnl0ZQAAAAAFAAAAAAAABDw=",
            "AAAAAAAAAAAAAAAAAAAAAgAAAAAAAAACAAAADwAAAAxjb3JlX21ldHJpY3MAAAAPAAAADnJlYWRfY29kZV9ieXRlAAAAAAAFAAAAAAAAM1g=",
            "AAAAAAAAAAAAAAAAAAAAAgAAAAAAAAACAAAADwAAAAxjb3JlX21ldHJpY3MAAAAPAAAAD3dyaXRlX2NvZGVfYnl0ZQAAAAAFAAAAAAAAAAA=",
            "AAAAAAAAAAAAAAAAAAAAAgAAAAAAAAACAAAADwAAAAxjb3JlX21ldHJpY3MAAAAPAAAACmVtaXRfZXZlbnQAAAAAAAUAAAAAAAAAAQ==",
            "AAAAAAAAAAAAAAAAAAAAAgAAAAAAAAACAAAADwAAAAxjb3JlX21ldHJpY3MAAAAPAAAAD2VtaXRfZXZlbnRfYnl0ZQAAAAAFAAAAAAAAALQ=",
            "AAAAAAAAAAAAAAAAAAAAAgAAAAAAAAACAAAADwAAAAxjb3JlX21ldHJpY3MAAAAPAAAACGNwdV9pbnNuAAAABQAAAAAAHJjX",
            "AAAAAAAAAAAAAAAAAAAAAgAAAAAAAAACAAAADwAAAAxjb3JlX21ldHJpY3MAAAAPAAAACG1lbV9ieXRlAAAABQAAAAAAF4S6",
            "AAAAAAAAAAAAAAAAAAAAAgAAAAAAAAACAAAADwAAAAxjb3JlX21ldHJpY3MAAAAPAAAAEWludm9rZV90aW1lX25zZWNzAAAAAAAABQAAAAAACcli",
            "AAAAAAAAAAAAAAAAAAAAAgAAAAAAAAACAAAADwAAAAxjb3JlX21ldHJpY3MAAAAPAAAAD21heF9yd19rZXlfYnl0ZQAAAAAFAAAAAAAAADA=",
            "AAAAAAAAAAAAAAAAAAAAAgAAAAAAAAACAAAADwAAAAxjb3JlX21ldHJpY3MAAAAPAAAAEG1heF9yd19kYXRhX2J5dGUAAAAFAAAAAAAABDw=",
            "AAAAAAAAAAAAAAAAAAAAAgAAAAAAAAACAAAADwAAAAxjb3JlX21ldHJpY3MAAAAPAAAAEG1heF9yd19jb2RlX2J5dGUAAAAFAAAAAAAAM1g=",
            "AAAAAAAAAAAAAAAAAAAAAgAAAAAAAAACAAAADwAAAAxjb3JlX21ldHJpY3MAAAAPAAAAE21heF9lbWl0X2V2ZW50X2J5dGUAAAAABQAAAAAAAAC0"
        ],
        latestLedgerRpc: 1142202, // From output.log
        latestLedgerCloseTimeRpc: new Date(parseInt("1748121693", 10) * 1000), // From output.log
        oldestLedgerRpc: 1021243,   // From output.log
        oldestLedgerCloseTimeRpc: new Date(parseInt("1747516440", 10) * 1000), // From output.log
        // ingestedAt is @default(now())
      },
    });
    testTransactionId = testTransaction.id;
    console.log(`[SUCCESS] Created mock ContractTransaction with ID: ${testTransaction.id} and txHash: ${testTransaction.txHash}`);

    // 2. Create a mock ContractEvent linked to the above transaction (using data from your first event log example)
    const mockEventId = "0004387339157639168-0000000001_test_" + Date.now();
    console.log(`[INFO] Attempting to create a mock ContractEvent with eventId: ${mockEventId} linked to txHash: ${mockTxHash}`);
    const testEvent = await prisma.contractEvent.create({
      data: {
        eventId: mockEventId,
        type: "contract",
        ledger: 1021507,
        ledgerClosedAt: new Date("2025-05-17T21:36:01Z"),
        contractId: "CDDRYX6CX4DLYTKXJFHX5BPHSQUCIPUFTEN74XJNK5YFFENYUBKYCITO",
        pagingToken: "0004387339157639168-0000000001",
        inSuccessfulContractCall: true,
        topics: [
          "AAAADwAAAAZBVFRFU1QAAA==",
          "AAAADwAAAAZSRVZPS0UAAA=="
        ],
        value: "AAAAEAAAAAEAAAADAAAADQAAACA4X2kBlwwsLaXyuQSUFQL+1We3EoXpUIedicXzElG36AAAABIAAAAAAAAAAMar6l8VHzRVvXMIrIQ6pNGbg/Vuh4VZ5q5xRc+aWBosAAAADgAAAAxyZWZfZGIyNDhkN2Y=",
        transactionTxHash: testTransaction.txHash, // Link to the created transaction
      },
    });
    testEventId = testEvent.id;
    console.log(`[SUCCESS] Created mock ContractEvent with ID: ${testEvent.id} and eventId: ${testEvent.eventId}`);

  } catch (error) {
    console.error('[ERROR] Operation failed:', error);
  } finally {
    // Cleanup: Delete the created test data
    // try {
    //   if (testEventId) {
    //     console.log(`[INFO] Attempting to delete mock ContractEvent with ID: ${testEventId}`);
    //     await prisma.contractEvent.delete({ where: { id: testEventId } });
    //     console.log('[SUCCESS] Deleted mock ContractEvent.');
    //   }
    //   if (testTransactionId) {
    //     console.log(`[INFO] Attempting to delete mock ContractTransaction with ID: ${testTransactionId}`);
    //     await prisma.contractTransaction.delete({ where: { id: testTransactionId } });
    //     console.log('[SUCCESS] Deleted mock ContractTransaction.');
    //   }
    // } catch (cleanupError) {
    //   console.error('[ERROR] Failed to cleanup test data:', cleanupError);
    // }

    console.log('[INFO] Disconnecting Prisma client...');
    await prisma.$disconnect();
    console.log('[INFO] Prisma client disconnected.');
  }
}

main(); 