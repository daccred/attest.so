import { DatabaseClient } from '../src/api/indexer/db'; // Adjust path as necessary

async function main() {
  console.log('[INFO] Initializing DatabaseClient...');
  const dbClient = new DatabaseClient();
  let createdTransaction = false;
  let createdEvent = false;

  try {
    // Test getLastProcessedLedger
    console.log('[INFO] Testing getLastProcessedLedger...');
    const lastLedger = await dbClient.getLastProcessedLedger();
    console.log(`[SUCCESS] getLastProcessedLedger returned: ${lastLedger}`);

    // Test updateLastProcessedLedger
    console.log('[INFO] Testing updateLastProcessedLedger...');
    await dbClient.updateLastProcessedLedger(lastLedger + 1); // Mock update
    const updatedLedger = await dbClient.getLastProcessedLedger();
    console.log(`[SUCCESS] updateLastProcessedLedger seems to work. New lastLedger: ${updatedLedger}`);
    // Revert to original for cleanliness, or handle as part of specific test data cleanup
    await dbClient.updateLastProcessedLedger(lastLedger);
    console.log(`[INFO] Reverted lastProcessedLedger to: ${lastLedger}`);


    // Test storeEventsAndTransactions
    console.log('[INFO] Testing storeEventsAndTransactions...');
    const originalTxHash = "e1c34a4babaf59214fbffa61e7cdcde06efec823ce3df0f76aa42a0f0afa5c97_dbc_test";
    const mockTxHash = originalTxHash + "_" + Date.now();
    const originalEventId = "0004387339157639168-0000000001_dbc_test";
    const mockEventId = originalEventId + "_" + Date.now();

    const mockEventsWithTransactions = [
      {
        event: {
          id: mockEventId,
          txHash: mockTxHash,
          type: "contract",
          ledger: 1021507,
          ledgerClosedAt: "2025-05-17T21:36:01Z",
          contractId: "CDDRYX6CX4DLYTKXJFHX5BPHSQUCIPUFTEN74XJNK5YFFENYUBKYCITO",
          pagingToken: "0004387339157639168-0000000001",
          inSuccessfulContractCall: true,
          topic: [
            "AAAADwAAAAZBVFRFU1QAAA==",
            "AAAADwAAAAZSRVZPS0UAAA=="
          ],
          value: "AAAAEAAAAAEAAAADAAAADQAAACA4X2kBlwwsLaXyuQSUFQL+1We3EoXpUIedicXzElG36AAAABIAAAAAAAAAAMar6l8VHzRVvXMIrIQ6pNGbg/Vuh4VZ5q5xRc+aWBosAAAADgAAAAxyZWZfZGIyNDhkN2Y=",
        },
        transactionDetails: {
          txHash: mockTxHash, // Ensure this matches the event's txHash for grouping
          status: "SUCCESS",
          ledger: "1021514", // Ensure these are strings if your parsing expects them
          createdAt: "1747517796",
          applicationOrder: 3,
          feeBump: false,
          envelopeXdr: "AAAAAgAAAADmRoSC3naqz3bx1TEOAU4Jign5MHCJrCdZAmtsLiZnIgBDxL0ABmDLAAAAlgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAGAAAAAAAAAABxxxfwr8GvE1XSU9+heeUKCQ+hZkb/l0tV3BSkbigVYEAAAAIcmVnaXN0ZXIAAAAEAAAAEgAAAAAAAAAA5kaEgt52qs928dUxDgFOCYoJ+TBwiawnWQJrbC4mZyIAAAAOAAAALEludGVncmF0aW9uVGVzdFNjaGVtYV82YWQxOTllZihmaWVsZD1TdHJpbmcpAAAAAQAAAAAAAAABAAAAAQAAAAAAAAAAAAAAAcccX8K/BrxNV0lPfoXnlCgkPoWZG/5dLVdwUpG4oFWBAAAACHJlZ2lzdGVyAAAABAAAABIAAAAAAAAAAOZGhILedqrPdvHVMQ4BTgmKCfkwcImsJ1kCa2wuJmciAAAADgAAACxJbnRlZ3JhdGlvblRlc3RTY2hlbWFfNmFkMTk5ZWYoZmllbGQ9U3RyaW5nKQAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAHUbtzTAyUd4Nr7fnD8xAUIpbKgOF9Fb+lzFB5V9fWGekAAAABAAAABgAAAAHHHF/Cvwa8TVdJT36F55QoJD6FmRv+XS1XcFKRuKBVgQAAABQAAAABAB4XKwAANowAAAQ8AAAAAAA0gn0AAAABLiZnIgAAAECOCcpAxGMVuvsiO1rF1rZ+Ro5vxS6owgJoMbhK8NI3CISPIDXB1Q9aoAilRFK81Hf9n1Ry46gkBNYVu/nzR8YF",
          resultXdr: "AAAAAAAtOm0AAAAAAAAAAQAAAAAAAAAYAAAAAPCRGHZ3mypaYgAnEniir6eHprC6SNkOdj4J+QSG/SQYAAAAAA==",
          resultMetaXdr: "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",
          diagnosticEventsXdr: [
            "AAAAAQAAAAAAAAAAAAAAAgAAAAAAAAADAAAADwAAAAdmbl9jYWxsAAAAAA0AAAAgxxxfwr8GvE1XSU9+heeUKCQ+hZkb/l0tV3BSkbigVYEAAAAPAAAACHJlZ2lzdGVyAAAAEAAAAAEAAAAEAAAAEgAAAAAAAAAA5kaEgt52qs928dUxDgFOCYoJ+TBwiawnWQJrbC4mZyIAAAAOAAAALEludGVncmF0aW9uVGVzdFNjaGVtYV82YWQxOTllZihmaWVsZD1TdHJpbmcpAAAAAQAAAAAAAAAB",
            "AAAAAQAAAAAAAAABxxxfwr8GvE1XSU9+heeUKCQ+hZkb/l0tV3BSkbigVYEAAAABAAAAAAAAAAIAAAAPAAAABlNDSEVNQQAAAAAADwAAAAhSRUdJU1RFUgAAABAAAAABAAAAAgAAAA0AAAAgumVeRKOdwxeuvyhzE7h2W9DB8+E3DyJGBHFZfeaS/vYAAAASAAAAAAAAAADmRoSC3naqz3bx1TEOAU4Jign5MHCJrCdZAmtsLiZnIg==",
            "AAAAAQAAAAAAAAABxxxfwr8GvE1XSU9+heeUKCQ+hZkb/l0tV3BSkbigVYEAAAACAAAAAAAAAAIAAAAPAAAACWZuX3JldHVybgAAAAAAAA8AAAAIcmVnaXN0ZXIAAAANAAAAILplXkSjncMXrr8ocxO4dlvQwfPhNw8iRgRxWX3mkv72",
          ],
          latestLedgerRpc: "1142202",
          latestLedgerCloseTimeRpc: "1748121693",
          oldestLedgerRpc: "1021243",
          oldestLedgerCloseTimeRpc: "1747516440",
        }
      }
    ];

    await dbClient.storeEventsAndTransactions(mockEventsWithTransactions);
    console.log('[SUCCESS] storeEventsAndTransactions called. Check DB for new entries (they will be cleaned up).');
    createdTransaction = true; // Assume success for cleanup, actual check might be more involved
    createdEvent = true;

  } catch (error) {
    console.error('[ERROR] mock-dbc script failed:', error);
  } finally {
    // Minimal cleanup for mock data based on known test txHash/eventId pattern
    // More robust cleanup would query by the specific IDs if returned by storeEventsAndTransactions
    console.log('[INFO] Attempting cleanup of mock data if created...');
    // try {
    //     const db = await dbClient.getDb(); // Re-ensure connection for cleanup
    //     const MOCK_TX_HASH_PREFIX = "e1c34a4babaf59214fbffa61e7cdcde06efec823ce3df0f76aa42a0f0afa5c97_dbc_test";
    //     const MOCK_EVENT_ID_PREFIX = "0004387339157639168-0000000001_dbc_test";

    //     const eventsDeleted = await db.collection('ContractEvent').deleteMany({ eventId: { $regex: `^${MOCK_EVENT_ID_PREFIX}` } });
    //     console.log(`[INFO] Cleaned up ${eventsDeleted.deletedCount} mock events.`);
        
    //     const transactionsDeleted = await db.collection('ContractTransaction').deleteMany({ txHash: { $regex: `^${MOCK_TX_HASH_PREFIX}` } });
    //     console.log(`[INFO] Cleaned up ${transactionsDeleted.deletedCount} mock transactions.`);

    // } catch(cleanupError){
    //     console.error('[ERROR] Error during mock data cleanup:', cleanupError);
    // }

    console.log('[INFO] Disconnecting DatabaseClient...');
    await dbClient.disconnect();
    console.log('[INFO] DatabaseClient disconnected.');
  }
}

main().catch(console.error); 