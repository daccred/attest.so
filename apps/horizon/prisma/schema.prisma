generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model HorizonEvent {
  id          String   @id @default(uuid())
  eventId     String   @unique
  ledger      Int
  timestamp   DateTime
  contractId  String
  eventType   String
  eventData   Json
  txHash      String?
  txEnvelope  String
  txResult    String
  txMeta      String
  txFeeBump   Boolean  @default(false)
  txStatus    String
  txCreatedAt DateTime
  
  // Relations
  transaction HorizonTransaction? @relation(fields: [txHash], references: [hash])
  operation HorizonOperation? @relation(fields: [operationId], references: [id])
  operationId String?
  
  // Indexer metadata
  ingestedAt  DateTime @default(now())
  
  @@index([ledger])
  @@index([contractId])
  @@index([timestamp])
  @@index([eventType])
  @@index([txHash])
  @@map("horizon_events")
}

model HorizonTransaction {
  id                String   @id @default(uuid())
  hash              String   @unique
  ledger            Int
  timestamp         DateTime
  sourceAccount     String
  fee               String
  operationCount    Int
  envelope          Json
  result            Json
  meta              Json
  feeBump           Boolean  @default(false)
  successful        Boolean
  memo              String?
  memoType          String?
  
  // Gas and resource usage
  inclusionFee      String?
  resourceFee       String?
  sorobanResourceUsage Json?
  
  // Relations
  events           HorizonEvent[]
  payments         HorizonPayment[]
  
  // Indexer metadata
  ingestedAt        DateTime @default(now())
  
  @@index([ledger])
  @@index([timestamp])
  @@index([sourceAccount])
  @@index([successful])
  @@map("horizon_transactions")
}

model HorizonAccount {
  id              String   @id @default(uuid())
  accountId       String   @unique
  sequence        String
  balances        Json
  signers         Json
  data            Json
  flags           Int
  homeDomain      String?
  thresholds      Json
  
  // Contract-specific fields
  isContract      Boolean  @default(false)
  contractCode    String?
  
  // Metrics
  operationCount  Int      @default(0)
  lastActivity    DateTime?
  
  // Indexer metadata
  ingestedAt      DateTime @default(now())
  lastUpdated     DateTime @updatedAt
  
  @@index([isContract])
  @@index([lastActivity])
  @@map("horizon_accounts")
}

model HorizonPayment {
  id              String   @id @default(uuid())
  paymentId       String   @unique
  transactionHash String
  operationId     String
  from            String
  to              String
  asset           Json
  amount          String
  timestamp       DateTime
  
  // Relations
  transaction     HorizonTransaction @relation(fields: [transactionHash], references: [hash])
  
  // Indexer metadata
  ingestedAt      DateTime @default(now())
  
  @@index([from])
  @@index([to])
  @@index([timestamp])
  @@index([transactionHash])
  @@map("horizon_payments")
}

// Enhanced model for contract-specific operations tracking
model HorizonOperation {
  id                String   @id @default(uuid())
  operationId       String   @unique
  transactionHash   String
  contractId        String   // Which specific contract this operation targets
  operationType     String   // e.g., "invoke_host_function", "restore_footprint"
  successful        Boolean  @default(true)
  sourceAccount     String
  operationIndex    Int      @default(0)
  
  // Enhanced contract-specific data
  function          String?  // Contract function called
  parameters        Json?    // Function parameters
  details           Json     // Full operation details
  
  // Relations
  events            HorizonEvent[]     // Events emitted by this operation
  
  // Indexer metadata  
  ingestedAt        DateTime @default(now())
  
  @@index([contractId])
  @@index([operationType])
  @@index([successful])
  @@index([sourceAccount])
  @@index([transactionHash])
  @@map("horizon_operations")
}

model HorizonIndexerState {
  id                    String   @id @default(uuid())
  lastProcessedLedger   Int
  lastProcessedAt       DateTime
  syncStatus            String   // "syncing", "synced", "error"
  errorMessage          String?
  
  // Performance metrics
  eventsPerSecond       Float?
  ledgersPerMinute      Float?
  
  updatedAt             DateTime @updatedAt
  
  @@map("horizon_indexer_state")
}

model Attestation {
  id                String   @id @default(uuid())
  attestationUid    String   @unique
  ledger            Int
  schemaUid         String
  attesterAddress   String
  subjectAddress    String?
  transactionHash   String
  schemaEncoding    String   // "XDR" or "JSON"
  message           String   // Raw JSON value or message
  value             Json?    // Optional parsed fields
  revoked           Boolean  @default(false)
  
  // Timestamps
  createdAt         DateTime @default(now())
  revokedAt         DateTime?
  
  // Relations
  schema            Schema?  @relation(fields: [schemaUid], references: [uid])
  
  // Indexer metadata
  ingestedAt        DateTime @default(now())
  lastUpdated       DateTime @updatedAt
  
  @@index([ledger])
  @@index([schemaUid])
  @@index([attesterAddress])
  @@index([subjectAddress])
  @@index([revoked])
  @@index([createdAt])
  @@map("attestations")
}

model Schema {
  id                        String   @id @default(uuid())
  uid                       String   @unique
  ledger                    Int
  schemaDefinition          String   // Schema definition from the contract
  parsedSchemaDefinition    Json?    // Parsed fields
  resolverAddress           String?
  revocable                 Boolean  @default(true)
  deployerAddress           String
  type                      String   @default("default") // Category label
  transactionHash           String
  
  // Timestamps
  createdAt                 DateTime @default(now())
  
  // Relations
  attestations              Attestation[]
  
  // Indexer metadata
  ingestedAt                DateTime @default(now())
  lastUpdated               DateTime @updatedAt
  
  @@index([ledger])
  @@index([deployerAddress])
  @@index([type])
  @@index([createdAt])
  @@map("schemas")
}